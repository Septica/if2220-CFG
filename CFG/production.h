enum EProduction {
    /*** Terminal Production ***/
    Program_terminal, 
    Var_terminal, Comma_terminal, Colon_terminal, Integer_terminal, Real_terminal, Char_terminal, Array_terminal, LBracket_terminal, RBracket_terminal, Range_terminal, Of_terminal, 
    Begin_terminal, End_terminal, Dot_terminal, 
    Plus_terminal, Minus_terminal, Times_terminal, Div_terminal, Mod_terminal, 
    L_terminal, G_terminal, LE_terminal, GE_terminal, EQ_terminal, NE_terminal, 
    And_terminal, Or_terminal, 
    Assignment_terminal, 
    If_terminal, Then_terminal, Else_terminal, 
    While_terminal, Do_terminal, 
    For_terminal, To_terminal, DownTo_terminal, Step_terminal, 
    Repeat_terminal, Until_terminal, 
    Input_terminal, Output_terminal, 
    Semicolon_terminal, 
    LParentheses_terminal, RParentheses_terminal, 
    Alphanumeric_terminal, 

    /*** Variable Production ***/
    // Program Structure
    Pascal, D_M, 
    // Program
    ProgramProduction, Alnum_Semicolon, 
    // Declaration
    Declaration, 
    Var_Declaration, 
    Identifier_Colon, 
    Identifier, 
    Comma_Identifier, 
    Type_Semicolon, 
    ScalarType, 
    ArrayType, Array_Size_Of, Array_Size, size, LB_Alnum_Range, Alnum_Range, Alnum_RB, 
    // Main
    Main,
    // Statement
    CompoundStatement, 
    Statement_End, 
    Statement, 
    // Assignment
    AssignmentProduction, AssignmentTerminal_E, 
    // If Then Else
    If_Then_Else, If_Then, Else_CompoundStatement, If_Bool, Then_CompoundStatement, 
    // While
	WhileProduction, While_Logic, Do_CompoundStatement, 
    // For
	ForProduction, 
    For_Assignment_To_E, For_Assignment_DownTo_E, 
    For_Assignment, To_E_Do_CompoundStatement, DownTo_E_Do_CompoundStatement, Step_E_Do_CompoundStatement, 
    To_E, DownTo_E, Step_E, 
    // Repeat
    RepeatProduction, Repeat_Statement, Until_Logic, 
    // Expression, Comparison, Logic
    E, C, Logic, 
	LP_E, LP_C, LP_Logic, 
	E_MathOp, E_CmpOp, Logic_LogicOp, 
    // Input/Output
	Input_Output, Param, LP_Alnum
};

typedef struct {
    enum EProduction a, b, c;
} Production;

Production productions[] = {
    // Program Structure
    {Pascal, ProgramProduction, D_M}, 
    {D_M, Declaration, Main}, 
    // Program
    {ProgramProduction, Program_terminal, Alnum_Semicolon}, 
    {Alnum_Semicolon, Alphanumeric_terminal, Semicolon_terminal}, 
    // Declaration
    {Declaration, Var_terminal, Var_Declaration}, 
    {Var_Declaration, Var_Declaration, Var_Declaration}, 
    {Var_Declaration, Identifier_Colon, Type_Semicolon}, 
    {Identifier_Colon, Identifier, Colon_terminal}, 
    {Identifier_Colon, Alphanumeric_terminal, Colon_terminal}, 
    {Identifier, Identifier, Comma_Identifier}, 
    {Identifier, Alphanumeric_terminal, Comma_Identifier}, 
    {Comma_Identifier, Comma_terminal, Identifier}, 
    {Comma_Identifier, Comma_terminal, Alphanumeric_terminal}, 
    {Type_Semicolon, Integer, Semicolon_terminal},
    {Type_Semicolon, Real, Semicolon_terminal},
    {Type_Semicolon, Char, Semicolon_terminal}, 
    {Type_Semicolon, ArrayType, Semicolon_terminal}, 
    {ArrayType, Array_Size_Of, Integer}, 
    {ArrayType, Array_Size_Of, Real}, 
    {ArrayType, Array_Size_Of, Char}, 
    {ArrayType, Array_Size_Of, ArrayType}, 
    {Array_Size_Of, Array_Size, Of_terminal}, 
    {Array_Size, Array_terminal, size}, 
    {size, LB_Alnum_Range, Alnum_RB}, 
    {LB_Alnum_Range, LBracket_terminal, Alnum_Range}, 
    {Alnum_Range, Alphanumeric_terminal, Range_terminal}, 
    {Alnum_RB, Alphanumeric_terminal, RBracket_terminal}, 
    // Main
    {Main, CompoundStatement, Dot_terminal}, 
    // Statement
    {CompoundStatement, Begin_terminal, Statement_End}, 
    {CompoundStatement, Begin_terminal, End_terminal}, 
    {Statement_End, Statement, End_terminal}, 
    {Statement, Statement, Statement}, 
    {Statement, AssignmentProduction, Semicolon_terminal}, 
    {Statement, If_Then_Else, Semicolon_terminal}, 
    {Statement, WhileProduction, Semicolon_terminal}, 
    {Statement, ForProduction, Semicolon_terminal}, 
    {Statement, RepeatProduction, Semicolon_terminal}, 
    {Statement, Input_Output, Semicolon_terminal}, 
    // Assignment
    {AssignmentProduction, Alphanumeric_terminal, AssignmentTerminal_E}, 
    {AssignmentTerminal_E, Assignment_terminal, Alphanumeric_terminal}, 
    {AssignmentTerminal_E, Assignment_terminal, E}, 
    // If Then Else
    {If_Then_Else, If_Then, Else_CompoundStatement}, 
    {If_Then_Else, If_Bool, Then_CompoundStatement}, 
    {If_Then, If_Bool, Then_CompoundStatement}, 
    {Else_CompoundStatement, Else_terminal, If_Then_Else}, 
    {Else_CompoundStatement, Else_terminal, CompoundStatement}, 
    {If_Bool, If_terminal, Logic}, 
    {If_Bool, If_terminal, C}, 
    {If_Bool, If_terminal, Alphanumeric_terminal}, 
    {Then_CompoundStatement, Then_terminal, CompoundStatement}, 
    // While
    {WhileProduction, While_Logic, Do_CompoundStatement}, 
    {While_Logic, While_terminal, C}, 
    {While_Logic, While_terminal, Logic}, 
    {Do_CompoundStatement, Do_terminal, CompoundStatement}, 
    // For
    {ForProduction, For_Assignment_To_E, Step_E_Do_CompoundStatement}, 
    {ForProduction, For_Assignment_DownTo_E, Step_E_Do_CompoundStatement}, 
    {ForProduction, For_Assignment, To_E_Do_CompoundStatement}, 
    {ForProduction, For_Assignment, DownTo_E_Do_CompoundStatement}, 
    {For_Assignment_To_E, For_Assignment, To_E}, 
    {For_Assignment_DownTo_E, For_Assignment, DownTo_E}, 
    {To_E_Do_CompoundStatement, To_E, Do_CompoundStatement}, 
    {DownTo_E_Do_CompoundStatement, DownTo_E, Do_CompoundStatement}, 
    {Step_E_Do_CompoundStatement, Step_E, Do_CompoundStatement}, 
    {For_Assignment, For_terminal, AssignmentProduction}, 
    {To_E, To_terminal, E}, 
    {To_E, To_terminal, Alphanumeric_terminal}, 
    {DownTo_E, DownTo_terminal, E}, 
    {DownTo_E, DownTo_terminal, Alphanumeric_terminal}, 
    {Step_E, Step_terminal, E}, 
    {Step_E, Step_terminal, Alphanumeric_terminal}, 
    // Repeat
    {RepeatProduction, Repeat_Statement, Until_Logic}, 
    {Repeat_Statement, Repeat_terminal, Statement}, 
    {Until_Logic, Until_terminal, Logic}, 
    {Until_Logic, Until_terminal, C}, 
    // Expression, Comparison, Logic
    {E, LP_E, RParentheses_terminal}, 
    {E, E_MathOp, E}, 
    {E, E_MathOp, Alphanumeric_terminal}, 
    {C, LP_C, RParentheses_terminal}, 
    {C, E_CmpOp, E}, 
    {C, E_CmpOp, Alphanumeric_terminal}, 
    {Logic, LP_Logic, RParentheses_terminal}, 
    {Logic, Logic_LogicOp, Logic}, 
    {Logic, Logic_LogicOp, C}, 
    {Logic, Logic_LogicOp, Alphanumeric_terminal}, 
    {LP_E, LParentheses_terminal, E}, 
    {LP_E, LParentheses_terminal, Alphanumeric_terminal}, 
    {LP_C, LParentheses_terminal, C}, 
    {LP_C, LParentheses_terminal, Alphanumeric_terminal}, 
    {LP_Logic, LParentheses_terminal, Logic}, 
    {LP_Logic, LParentheses_terminal, Alphanumeric_terminal}, 
    {E_MathOp, E, Plus_terminal}, 
    {E_MathOp, E, Minus_terminal}, 
    {E_MathOp, E, Times_terminal}, 
    {E_MathOp, E, Div_terminal}, 
    {E_MathOp, E, Mod_terminal}, 
    {E_MathOp, Alphanumeric_terminal, Plus_terminal}, 
    {E_MathOp, Alphanumeric_terminal, Minus_terminal}, 
    {E_MathOp, Alphanumeric_terminal, Times_terminal}, 
    {E_MathOp, Alphanumeric_terminal, Div_terminal}, 
    {E_MathOp, Alphanumeric_terminal, Mod_terminal}, 
    {E_CmpOp, E, L_terminal}, 
    {E_CmpOp, E, G_terminal}, 
    {E_CmpOp, E, LE_terminal}, 
    {E_CmpOp, E, GE_terminal}, 
    {E_CmpOp, E, EQ_terminal}, 
    {E_CmpOp, E, NE_terminal}, 
    {E_CmpOp, Alphanumeric_terminal, L_terminal}, 
    {E_CmpOp, Alphanumeric_terminal, G_terminal}, 
    {E_CmpOp, Alphanumeric_terminal, LE_terminal}, 
    {E_CmpOp, Alphanumeric_terminal, GE_terminal}, 
    {E_CmpOp, Alphanumeric_terminal, EQ_terminal}, 
    {E_CmpOp, Alphanumeric_terminal, NE_terminal}, 
    {Logic_LogicOp, Logic, And_terminal}, 
    {Logic_LogicOp, Logic, Or_terminal}, 
    {Logic_LogicOp, C, And_terminal}, 
    {Logic_LogicOp, C, Or_terminal}, 
    {Logic_LogicOp, Alphanumeric_terminal, And_terminal}, 
    {Logic_LogicOp, Alphanumeric_terminal, Or_terminal}, 
    // Input/Output
    {Input_Output, Input_terminal, Param}, 
    {Input_Output, Output_terminal, Param}, 
    {Param, LP_Alnum, RParentheses_terminal}, 
    {LP_Alnum, LParentheses_terminal, Alphanumeric_terminal}
};